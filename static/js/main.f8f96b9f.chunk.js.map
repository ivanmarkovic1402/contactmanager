{"version":3,"sources":["context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/TextInputGroup.js","components/contacts/AddContact.js","components/contacts/EditContact.js","components/layout/Header.js","components/pages/About.js","components/pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","map","Provider","dispatch","setState","axios","get","then","res","data","catch","err","console","log","value","this","props","children","Component","Consumer","Contact","showContactInfo","onDeleteClick","delete","alert","name","email","phone","className","onClick","style","cursor","float","color","bind","to","marginRight","Contacts","Fragment","key","TextInputGroup","label","placeholder","onChange","error","htmlFor","classnames","defaultProps","AddContact","errors","e","target","onSubmit","preventDefault","newContact","post","history","push","EditContact","updContact","match","params","put","Header","branding","href","App","basename","process","exact","path","component","About","NotFound","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f8f96b9f.chunk.js","sourcesContent":["import React, { Component} from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Context = React.createContext();\r\n\r\nconst reducer = (state, action) => {\r\n    switch(action.type){\r\n        case 'DELETE_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.filter(contact => contact.id !== action.payload )\r\n            };\r\n        case 'ADD_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: [action.payload, ...state.contacts]\r\n            };\r\n        case 'UPDATE_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.map(contact => contact.id === action.payload.id ? (contact = action.payload) : contact)\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport class Provider extends Component {\r\n    state = {\r\n        contacts: [],\r\n        dispatch: action => {\r\n            this.setState(state => reducer(state, action))\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        axios.get('https://jsonplaceholder.typicode.com/users')\r\n            .then(res => this.setState({ contacts:res.data}))\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    // async componentDidMount(){\r\n    //     const res = await axios.get('https://jsonplaceholder.typicode.com/users');\r\n    //     this.setState({ contacts: res.data});\r\n    // }\r\n\r\n    render(){\r\n        return (\r\n            <Context.Provider value={this.state}>\r\n                {this.props.children}\r\n            </Context.Provider>\r\n        );\r\n    }\r\n}\r\n\r\nexport const Consumer = Context.Consumer;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { Consumer} from '../../context';\r\nimport axios from 'axios';\r\n\r\nclass Contact extends Component {\r\n    state ={\r\n        showContactInfo: false\r\n    };\r\n\r\n    onDeleteClick = (id, dispatch) => {\r\n        // this.props.deleteClickHandler()\r\n\r\n        axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`)\r\n            .then(dispatch({type: 'DELETE_CONTACT', payload: id}))\r\n            .catch(err => alert(err));\r\n        \r\n    }\r\n\r\n    // onDeleteClick = async (id, dispatch) => {\r\n    //     await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n    //     dispatch({type: 'DELETE_CONTACT', payload: id});        \r\n    // }\r\n\r\n    render() { \r\n        const { id, name, email, phone } = this.props.contact;\r\n        const { showContactInfo } = this.state;\r\n        return ( \r\n\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value;\r\n                    return(\r\n                    <div className=\"card card-body mb-3\">\r\n                        <h4>{name} \r\n                            <i onClick={() => this.setState({ showContactInfo: !this.state.showContactInfo})} \r\n                            className=\"fas fa-sort-down\" style={{cursor: 'pointer'}}></i>\r\n                            <i className=\"fas fa-times\" style={{ cursor: 'pointer', float: 'right', color: 'red'}}\r\n                                onClick={this.onDeleteClick.bind(this, id, dispatch)}></i>\r\n                            <Link to={`/contact/edit/${id}`}>\r\n                                <i \r\n                                    className=\"fas fa-pencil-alt\" \r\n                                    style={{\r\n                                        cursor: 'pointer',\r\n                                        float: 'right',\r\n                                        color: 'black',\r\n                                        marginRight: '1rem'\r\n                                    }}></i>\r\n                            </Link>\r\n                        </h4>\r\n                        {showContactInfo ? (<ul className=\"list-group\">\r\n                            <li className=\"list-group-item\">Email: {email}</li>    \r\n                            <li className=\"list-group-item\">Phone: {phone}</li>\r\n                        </ul>) : null}\r\n                        \r\n                    </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n         );\r\n    }\r\n}\r\n\r\nContact.propTypes = {\r\n    contact: PropTypes.object.isRequired,\r\n    // deleteClickHandler: PropTypes.func.isRequired,\r\n}\r\n \r\nexport default Contact;","import React, { Component } from 'react';\r\nimport Contact from './Contact';\r\nimport { Consumer } from '../../context';\r\n\r\nclass Contacts extends Component {\r\n    \r\n    // deleteContact = (id) => {\r\n    //     const { contacts } = this.state;\r\n\r\n    //     const newContacts = contacts.filter(contact => contact.id !== id);\r\n    //     this.setState({contacts: newContacts});\r\n    // }\r\n\r\n    render() { \r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                const { contacts } = value;   \r\n                return(\r\n                    <React.Fragment>\r\n                        <h1 className=\"display-4 mb-2\">\r\n                            <span className=\" text-danger\">Contact</span> List\r\n                        </h1>\r\n                        {contacts.map(contact =>(\r\n                            <Contact key={contact.id} \r\n                                    contact={contact}\r\n                                    // deleteClickHandler = {this.deleteContact.bind(this, contact.id)}\r\n                            />\r\n                        ))}\r\n                    </React.Fragment>\r\n                ); \r\n                }}\r\n            </Consumer>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Contacts;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames';\r\n\r\nconst TextInputGroup = ({\r\n  label,\r\n  name,\r\n  value,\r\n  placeholder,\r\n  type,\r\n  onChange,\r\n  error\r\n}) => {\r\n    return (\r\n        <div>\r\n            <div className=\"form-group\">\r\n                <label htmlFor={name}>{label}</label>\r\n                <input \r\n                type={type}\r\n                name={name}\r\n                className={classnames(\"form-control form-control-lg\",{\r\n                    'is-invalid': error\r\n                })} \r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange} \r\n                />\r\n                {error && <div className=\"invalid-feedback\">{error}</div>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nTextInputGroup.propTypes = {\r\n    label: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    error: PropTypes.string\r\n}\r\n\r\nTextInputGroup.defaultProps = {\r\n    type: 'text'\r\n}\r\n\r\nexport default TextInputGroup;","import React, { Component } from 'react';\r\nimport { Consumer } from '../../context';\r\nimport TextInputGroup from '../layout/TextInputGroup';\r\nimport axios from 'axios';\r\n\r\n// import uuid from 'uuid';\r\nimport { v1 as uuidv1 } from 'uuid';\r\n\r\nclass AddContact extends Component {\r\n    state = { \r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        errors: {}\r\n     }\r\n\r\n    onChange = (e) => this.setState({ [e.target.name]: e.target.value })\r\n\r\n     onSubmit = (dispatch, e) => {\r\n         e.preventDefault();\r\n         const { name, email, phone } = this.state;\r\n\r\n         //Check for errors\r\n        if(name === ''){\r\n            this.setState({errors: {name: 'Name is required'}});\r\n            return;\r\n        }\r\n        if(email === ''){\r\n            this.setState({errors: {email: 'Email is required'}});\r\n            return;\r\n        }\r\n        if(phone === ''){\r\n            this.setState({errors: {phone: 'Phone is required'}});\r\n            return;\r\n        }\r\n\r\n         const newContact = {\r\n            //  id: uuidv1(),           //zakomentarisano zbog POST request na jsonplaceholder...tammo ne treba id\r\n             name,\r\n             email,\r\n             phone\r\n         };\r\n\r\n         axios.post('https://jsonplaceholder.typicode.com/users', newContact)\r\n            .then(res => dispatch({ type: 'ADD_CONTACT', payload: res.data}));\r\n\r\n        // const res = await axios.post('https://jsonplaceholder.typicode.com/users', newContact);\r\n        // dispatch({type: 'ADD_CONTACT', payload: res.data});\r\n\r\n        //  dispatch({type: 'ADD_CONTACT', payload: newContact});   //zakomentarisano zbog POST request na jsonplaceholder\r\n\r\n         //Clear the state (clear the form after subition)\r\n         this.setState({\r\n             name: '',\r\n             email: '',\r\n             phone: '',\r\n             errors: {}\r\n         });\r\n\r\n         this.props.history.push('/');\r\n     }\r\n\r\n    render() { \r\n        const { name, email, phone, errors } = this.state;\r\n\r\n\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const {dispatch} = value;\r\n                    return(\r\n                        <div>\r\n                            <div className=\"card mb-3\">\r\n                                <div className=\"card-header\">\r\n                                    Add Contact\r\n                                </div>\r\n                                <div className=\"card-body\">\r\n                                    <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                                        <TextInputGroup\r\n                                            label=\"Name\"\r\n                                            name=\"name\"\r\n                                            placeholder=\"Enter name...\"\r\n                                            value={name}\r\n                                            onChange={this.onChange}\r\n                                            error={errors.name}\r\n                                        />\r\n                                        <TextInputGroup\r\n                                            label=\"Email\"\r\n                                            name=\"email\"\r\n                                            type=\"email\"\r\n                                            placeholder=\"Enter email...\"\r\n                                            value={email}\r\n                                            onChange={this.onChange}\r\n                                            error={errors.email}\r\n                                        />\r\n                                        <TextInputGroup\r\n                                            label=\"Phone\"\r\n                                            name=\"phone\"\r\n                                            placeholder=\"Enter phone...\"\r\n                                            value={phone}\r\n                                            onChange={this.onChange}\r\n                                            error={errors.phone}\r\n                                        />\r\n                                        \r\n                                        <input type=\"submit\" value=\"Add Contact\" className=\"btn btn-light btn-block\" />\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        );\r\n    }\r\n}\r\n \r\nexport default AddContact;","import React, { Component } from 'react';\r\nimport { Consumer } from '../../context';\r\nimport TextInputGroup from '../layout/TextInputGroup';\r\nimport axios from 'axios';\r\n\r\n// import uuid from 'uuid';\r\nimport { v1 as uuidv1 } from 'uuid';\r\n\r\nclass EditContact extends Component {\r\n    state = { \r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        errors: {}\r\n     }\r\n\r\n     componentDidMount(){\r\n         const { id } = this.props.match.params;\r\n\r\n         axios.get(`https://jsonplaceholder.typicode.com/users/${id}`)\r\n            .then(res => {\r\n                this.setState({\r\n                    name: res.data.name,\r\n                    email: res.data.email,\r\n                    phone: res.data.phone\r\n                });\r\n            });\r\n     }\r\n\r\n    onChange = (e) => this.setState({ [e.target.name]: e.target.value })\r\n\r\n     onSubmit = (dispatch, e) => {\r\n         e.preventDefault();\r\n         const { name, email, phone } = this.state;\r\n\r\n         //Check for errors\r\n        if(name === ''){\r\n            this.setState({errors: {name: 'Name is required'}});\r\n            return;\r\n        }\r\n        if(email === ''){\r\n            this.setState({errors: {email: 'Email is required'}});\r\n            return;\r\n        }\r\n        if(phone === ''){\r\n            this.setState({errors: {phone: 'Phone is required'}});\r\n            return;\r\n        }\r\n\r\n\r\n        const updContact = {\r\n            name,\r\n            email,\r\n            phone\r\n        }\r\n\r\n        const { id } = this.props.match.params;\r\n\r\n        axios.put(`https://jsonplaceholder.typicode.com/users/${id}`, updContact)\r\n            .then(res => dispatch({type: 'UPDATE_CONTACT', payload: res.data}))\r\n            .catch(err => console.log(err));\r\n\r\n         //Clear the state (clear the form after subition)\r\n         this.setState({\r\n             name: '',\r\n             email: '',\r\n             phone: '',\r\n             errors: {}\r\n         });\r\n\r\n         this.props.history.push('/');\r\n     }\r\n\r\n    render() { \r\n        const { name, email, phone, errors } = this.state;\r\n\r\n\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const {dispatch} = value;\r\n                    return(\r\n                        <div>\r\n                            <div className=\"card mb-3\">\r\n                                <div className=\"card-header\">\r\n                                    Edit Contact\r\n                                </div>\r\n                                <div className=\"card-body\">\r\n                                    <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                                        <TextInputGroup\r\n                                            label=\"Name\"\r\n                                            name=\"name\"\r\n                                            placeholder=\"Enter name...\"\r\n                                            value={name}\r\n                                            onChange={this.onChange}\r\n                                            error={errors.name}\r\n                                        />\r\n                                        <TextInputGroup\r\n                                            label=\"Email\"\r\n                                            name=\"email\"\r\n                                            type=\"email\"\r\n                                            placeholder=\"Enter email...\"\r\n                                            value={email}\r\n                                            onChange={this.onChange}\r\n                                            error={errors.email}\r\n                                        />\r\n                                        <TextInputGroup\r\n                                            label=\"Phone\"\r\n                                            name=\"phone\"\r\n                                            placeholder=\"Enter phone...\"\r\n                                            value={phone}\r\n                                            onChange={this.onChange}\r\n                                            error={errors.phone}\r\n                                        />\r\n                                        \r\n                                        <input type=\"submit\" value=\"Update Contact\" className=\"btn btn-light btn-block\" />\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        );\r\n    }\r\n}\r\n \r\nexport default EditContact;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Header = (props) => {\r\n    const { branding } = props;\r\n    return ( \r\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\r\n            <div className=\"container\">\r\n                <a href=\"/\" className=\"navbar-brand\">\r\n                    {branding}\r\n                </a>\r\n                <div>\r\n                    <ul className=\"navbar-nav mr-auto\">\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/\" className=\"nav-link\"><i className=\"fas fa-home\"></i> Home</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/contact/add\" className=\"nav-link\"><i className=\"fas fa-plus\"></i> Add Contact</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/about\" className=\"nav-link\"><i className=\"fas fa-question\"></i> About</Link>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n     );\r\n    \r\n}\r\n\r\nHeader.defaultProps = {\r\n    branding: 'My App'\r\n}\r\n\r\nHeader.propTypes = {\r\n    branding: PropTypes.string.isRequired\r\n}\r\n \r\nexport default Header;","import React from 'react';\r\n\r\nexport default () => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4\">About Contacts</h1>\r\n            <p className=\"lead\">Simple app to manage contacts</p>\r\n            <p className=\"text-secondary\">Version 1.0.0</p>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport default () => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4\"><span className=\"text-danger\">404</span> Page Not Found</h1>\r\n            <p className=\"lead\">Sorry, that page does not exist</p>\r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport Contacts from './components/contacts/Contacts';\nimport AddContact from './components/contacts/AddContact';\nimport EditContact from './components/contacts/EditContact';\nimport Header from './components/layout/Header';\nimport About from './components/pages/About';\nimport NotFound from './components/pages/NotFound';\n\nimport { Provider } from './context';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Provider>\n      <Router basename={process.env.PUBLIC_URL}>\n      <div className=\"App\">\n        <Header branding=\"Contact Manager\" />\n        <div className=\"container\">\n          <Switch>\n              <Route exact path=\"/\" component={Contacts} />\n              <Route exact path=\"/contact/add\" component={AddContact} />\n              <Route exact path=\"/contact/edit/:id\" component={EditContact} />\n              <Route exact path=\"/about\" component={About} />\n              <Route component={NotFound} />\n          </Switch>\n        </div>\n      </div>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}